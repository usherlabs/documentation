openapi: 3.0.0
info:
  title: LogStore API
security:
  - basicAuth: [ ]
servers:
  - url: https://api.logstore.usher.so
paths:
  /streams/{id}/data/partitions/{partition}/{queryType}:
    get:
      summary: Query Data
      description: |
        ```http
        /streams/{id}/data/partitions/{partition}/{queryType}
        ```

        The **Query Data** endpoint fetches data from a specific stream partition using three types of queries: **`last`**, **`from`**, **`range`**. The endpoint returns a stream of data, which can be processed in real-time or piece-by-piece, rather than all at once.

        - **`format`** to specify response data format, which can be **`protocol`**, **`object`**, or **`raw`**.
        - **`version`** to define the version of the data to query.
        - Additional parameters like **`count`**, **`fromTimestamp`**, **`fromSequenceNumber`**, **`toTimestamp`**, **`toSequenceNumber`**, **`publisherId`**, and **`msgChainId`** to narrow down the data based on the chosen query type.

        The endpoint is secured with Basic Authentication, and improper authentication results in a '401 Unauthorized' response. The responses can be in either **`application/json`** or **`text/plain`** format, depending on the chosen **`format`**.
      operationId: queryData
      security:
        - basicAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the stream.
        - in: path
          name: partition
          required: true
          schema:
            type: integer
          description: The partition number within the stream.
        - in: path
          name: queryType
          required: true
          schema:
            type: string
            enum: [ last, from, range ]
          description: The type of query to perform.
        - in: query
          name: format
          schema:
            type: string
            enum: [ protocol, object, raw ]
          description: The format of the response. 'Protocol' and 'object' return the data in JSON format, while 'raw' returns it in plain text.
        - in: query
          name: version
          schema:
            type: integer
          description: The version of the data. Used in combination with `format` to control how data is serialized and deserialized.
        - in: query
          name: count
          schema:
            type: integer
          description: The number of records to fetch (only for 'last' query type).
        - in: query
          name: fromTimestamp
          schema:
            type: integer
          description: The starting timestamp for the query (for 'from' and 'range' query types).
        - in: query
          name: fromSequenceNumber
          schema:
            type: integer
          description: The starting sequence number (for 'from' and 'range' query types).
        - in: query
          name: toTimestamp
          schema:
            type: integer
          description: The ending timestamp for the query (only for 'range' query type).
        - in: query
          name: toSequenceNumber
          schema:
            type: integer
          description: The ending sequence number (only for 'range' query type).
        - in: query
          name: publisherId
          schema:
            type: string
          description: The ID of the publisher (only for 'range' query type when `publisherId` is given).
        - in: query
          name: msgChainId
          schema:
            type: string
          description: The ID of the message chain (only for 'range' query type when `publisherId` is given).
      responses:
        '200':
          description: A successful operation will return a stream of the requested data. The structure of each item in the stream will depend on the specified format and query parameters.
          content:
            application/json:
              schema:
                type: object
                description: Each item in the stream is a JSON object with this structure.
                properties:
                  streamId: "stream123"
                  streamPartition: 0
                  timestamp: 1633095662
                  sequenceNumber: 12345
                  publisherId: "pub123"
                  msgChainId: "msg123"
                  messageType: "TYPE_A"
                  contentType: "text/plain"
                  encryptionType: "NONE"
                  groupKeyId: "group123"
                  content: "Hello, world!"
                  signature: "SIG123"
        '400':
          description: An invalid input response is returned when the request parameters are not valid, such as an invalid `id` or `queryType`.
          content:
            application/json:
              examples:
                invalidInput:
                  value:
                    status: 400
                    error: "Invalid input. Please check your request parameters."
        '500':
          description: A failure to fetch data is typically due to a server-side issue.
          content:
            application/json:
              examples:
                failedToFetchData:
                  value:
                    status: 500
                    error: "Failed to fetch data!"
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      bearerFormat: base64
      description: |
        Basic Authentication is employed using Ethereum wallet address and its signature, Base64-encoded in the 'Authorization' header as `Authorization: Basic {Base64 encoded walletAddress:signature}`.

        Note: Improper authentication will lead to a '401 Unauthorized' response. For further guidance and best practices, please consult the Authentication section of the API documentation.
